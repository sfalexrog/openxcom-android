// Dummy values
ext.signing = [
        enabled      : false,
        storeFilePath: '.keystore',
        storePassword: 'password',
        keyAlias     : 'alias',
        keyPassword  : 'password',
]
apply plugin: 'com.android.application'
if (file('signing.gradle').exists()) {
    apply from: 'signing.gradle'
}

def git = org.ajoberstar.grgit.Grgit.open(file('..'))
ext.revision = git.head().getAbbreviatedId(7)

def buildArchEnv = System.getenv()['BUILD_ARCH_LIST']

def buildArchList = new ArrayList<String>()

if (!buildArchEnv) {
    buildArchList.addAll(["armeabi-v7a", "x86", "x86_64", "arm64-v8a"])
} else {
    buildArchList.addAll(buildArchEnv.split(":"))
}

android {
    compileSdkVersion 28

    externalNativeBuild {
        cmake {
            path "src/main/jni/CMakeLists.txt"
        }
    }

    defaultConfig {
        applicationId "org.libsdl.openxcom"
        minSdkVersion 10
        targetSdkVersion 28

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_UNIFIED_HEADERS=ON",
                        "-DANDROID_STL=c++_static", "-DANDROID_ARM_MODE=arm",
                        "-DANDROID_ARM_NEON=TRUE",
                        "-DANDROID_PLATFORM=android-9"
                abiFilters.addAll(buildArchList)
                cppFlags "-std=c++11", "-fexceptions", "-frtti"
            }
        }
    }

    if (project.signing.enabled) {
        signingConfigs {
            release {
                storeFile file(project.signing.storeFilePath)
                storePassword project.signing.storePassword
                keyAlias project.signing.keyAlias
                keyPassword project.signing.keyPassword

                applicationVariants.all { variant ->
                    variant.outputs.each { output ->
                        output.outputFile = new File(output.outputFile.parent,
                                output.outputFile.name.replace("app-release",
                                        "OpenXcom-v1.0-g${project.revision}-${buildArchList.join('_')}"))
                    }
                }
            }
        }
        buildTypes {
            release {
                signingConfig signingConfigs.release
                externalNativeBuild {
                    cmake {
                        cFlags "-O3", "-ffast-math"
                        cppFlags "-O3", "-ffast-math"
                    }
                }
            }
        }
    }

    tasks.withType(Zip) {
        task ->
            task.doLast {
                ant.checksum file: it.archivePath, algorithm: "MD5"
            }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        debugJava {
            debuggable true
            jniDebuggable false
            minifyEnabled false
            zipAlignEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dependenciesInfo {
        includeInApk true
        includeInBundle true
    }
    buildToolsVersion '30.0.2'
    ndkVersion '23.1.7779620'
}
def getFolder(resource) {
    def binDir = file('src/main/jni/OpenXcom/bin/' + resource)
    return binDir
}
task packBin(description: 'Update data files.') {
    def index = 0
    ['common', 'standard', 'UFO', 'TFTD'].each { String res ->
        tasks.register('zip' + res, Zip) {
            doFirst { println('Packing ' + res + '...') }
            archiveFileName = index.toString() + '_' + res + '.zip'
            destinationDirectory = file('src/main/assets')
            from getFolder(res)
            into res
        }
        dependsOn(tasks.getByName('zip' + res))
        ++index
    }
    tasks.register('zipTranslations', Zip) {
        doFirst { println('Packing translations...' ) }
        archiveFileName = '7_translations.zip'
        destinationDirectory = file('src/main/assets')
        from getFolder('translations/output')
    }
    dependsOn(tasks.getByName('zipTranslations'))
}

gradle.projectsEvaluated {
    preBuild.dependsOn packBin
}
